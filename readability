#include <cs50.h>
#include <ctype.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int count_letters(string text);
int count_words(string text);
int count_sentences(string text);
void coleman_liau(int words, int letters, int sentences);

int main(void)
{

    string text = get_string("text: ");
    int letters = count_letters(text);
    int words = count_words(text);
    int sentences = count_sentences(text);
    coleman_liau(words, letters, sentences);
}

int count_letters(string text)
{ // create a variable called counter to count the number of letters
    // to use in the coleman method
    int letter_counter = 0;
    // loop will go through each char in text and check if its alphabetical
    // if it is add counter by 1  and return value at the end
    for (int i = 0, x = strlen(text); i < x; i++)
    {
        if (isalpha(text[i]))
        {
            letter_counter++;
        }
    }
    return letter_counter;
}

int count_words(string text)
{ // s ame idea as the letters except it checks for spaces to track how many words by checking the
  // spacing between them
    // starts at 1 since we start by writing 1 word no space before/ return val at end
    int words_counter = 1;
    for (int i = 0, x = strlen(text); i < x; i++)
    {
        if (text[i] == ' ')
            words_counter++;
    }
    return words_counter;
}
int count_sentences(string text)
{ // same idea just loop checking each character for any . or ! or ? to identify sentences
    // counter by 1 whenever it finds any of these characters
    int sentence_counter = 0;
    for (int i = 0, x = strlen(text); i < x; i++)
    {
        if (text[i] == '.' || text[i] == '!' || text[i] == '?')
            sentence_counter++;
    }
    return sentence_counter;
}

void coleman_liau(int words, int letters, int sentences)
{ // need l and s as a float, casttyping letters/words as floats also for accurate calculations
    float L = (float) letters / words * 100;
    float S = (float) sentences / words * 100;
    // now that we have the return of L and S we do the coleman liau method provided
    float grade = 0.0588 * L - 0.296 * S - 15.8;

    // rounded the grades to the nearest int using the math library from cs50 manual
    grade = round(grade);
    // checking the conditions if the total number is > 16 print grade 16+ as instructed
    if (grade >= 16)
    {
        printf("Grade 16+\n");
    }
    // if its a negative number or 1 to print before grade 1
    else if (grade <= 1)
    {
        printf("Before Grade 1\n");
    }
    else // else assuming its a positive number between 2 and 15
         // print the grade as an int and i have to typecast grade as an int
    {
        printf("Grade %i\n", (int) grade);
    }
}
